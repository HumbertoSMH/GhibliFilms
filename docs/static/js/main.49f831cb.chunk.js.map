{"version":3,"sources":["components/FIlmsContext.js","configuration/ApiConfiguration.js","helpers/FilmsHelper.js","components/FilmScreen.js","components/Autocomplete.js","components/FilmItem.js","components/FilmsScreen.js","router/AppRouter.js","studio-ghibli-logo.svg","GhibliApp.js","hooks/useFetchFilms.js","index.js"],"names":["FilmsContext","createContext","API_URL","CONFIG_FETCH_GET","method","getFilmsByRegex","regex","films","toLowerCase","filter","film","title","includes","description","FilmScreen","filmId","useParams","useContext","loading","id","find","getFilmById","className","src","poster","running_time","rt_score","release_date","original_title_romanised","original_title","director","producer","to","Autocomplete","data","history","useHistory","useState","filteredResults","updateFilteredResults","displayResults","updateDisplayResults","focusIndex","updateFocusIndex","linkRefs","keys","useEffect","SearchResults","type","placeholder","onChange","e","searchTerm","target","value","onKeyDown","keyCode","push","persist","relatedTarget","hideAutoSuggest","length","map","article","index","href","ref","FilmItem","score","romanised","originalTitle","style","backgroundImage","FilmsScreen","filmsFiltered","setFilmsFiltered","AppRouter","exact","path","component","GhibliApp","setLoading","setFilms","error","setError","fetch","then","resp","json","forEach","filmName","response","posterRes","Poster","useFetch","GhibliLogo","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49f831cb.chunk.js","sourcesContent":["import { createContext } from 'react';\r\nexport const FilmsContext = createContext(null);\r\n","export const API_URL = 'https://ghibliapi.herokuapp.com/films';\r\nexport const CONFIG_FETCH_GET = {\r\n\tmethod: 'GET'\r\n};\r\nexport const API_KEY_FILMS = '43172ad';\r\nexport const API_POSTER_FILMS_URL = 'https://www.omdbapi.com/?t=';\r\nexport const getUrlPoster = (filmName) => `${API_POSTER_FILMS_URL}${filmName}&apikey=${API_KEY_FILMS}`;\r\n","export const getFilmById = (id, films) => {\r\n\treturn films.find(film => film.id === id);\r\n};\r\n\r\nexport const getFilmsByRegex = (regex, films) => {\r\n\tregex = regex.toLowerCase();\r\n\tif (regex === '') {\r\n\t\treturn films;\r\n\t}\r\n\treturn films.filter(film => film.title.toLowerCase().includes(regex) || film.description.toLowerCase().includes(regex));\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { getFilmById } from '../helpers/FilmsHelper';\r\n//\timport { useFetchFilm } from '../hooks/useFetchFilm';\r\nimport { FilmsContext } from './FIlmsContext';\r\n\r\nexport const FilmScreen = () => {\r\n\tconst { filmId } = useParams();\r\n\tconst { films, loading } = useContext(FilmsContext);\r\n\tconst film = getFilmById(filmId, films);\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{\r\n\t\t\t\tloading && (\r\n\t\t\t\t\t<div className=\"loading\">\r\n\t\t\t\t\t\t<img src=\"https://i.gifer.com/origin/62/6207a5ce52cc8164c1b10a4e460d6df3_w200.gif\" title=\"loading gif\" />\r\n\t\t\t\t\t</div>)\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\tfilm\r\n\t\t\t\t\t? (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<div className=\"col-sm-12 col-push-1 col-4 mt-25\">\r\n\t\t\t\t\t\t\t\t<img src={film?.poster} title=\"img\" className=\"film_picture\" />\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-sm-12 col-6 mt-25\">\r\n\t\t\t\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"card_info\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"card_time\">\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"far fa-clock\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{film?.running_time}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"card_rate\">\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"far fa-star\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{film?.rt_score}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"card_date\">\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-calendar-alt\"></i>\r\n\t\t\t\t\t\t\t\t\t\t\t<span>{film?.release_date}</span>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<h3 className=\"card_title\">{film?.title}</h3>\r\n\t\t\t\t\t\t\t\t\t<h4 className=\"card_title_original_full\">{film?.original_title_romanised}<small>({film?.original_title})</small></h4>\r\n\t\t\t\t\t\t\t\t\t<p className=\"card_text_full\">\r\n\t\t\t\t\t\t\t\t\t\t{film?.description}\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t<p className=\"card_director\">\r\n\t\t\t\t\t\t\t\t\t\t<strong>Director:</strong> {film?.director}\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t<p className=\"card_producer\">\r\n\t\t\t\t\t\t\t\t\t\t<strong>Producer:</strong> {film?.producer}\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t<div className=\"card_link_container\">\r\n\t\t\t\t\t\t\t\t\t\t<Link to=\"/\" className=\"card_link\">Back</Link>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)\r\n\t\t\t\t\t: (\r\n\t\t\t\t\t\t<div className=\"film_not_found\">\r\n\t\t\t\t\t\t\t<img src=\"https://i.pinimg.com/564x/10/ce/21/10ce2159687d0e034a3e8f5a7db7f07c.jpg\" title=\"not-found\" />\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\tOps! nothing to see here\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<div className=\"card_link_container\">\r\n\t\t\t\t\t\t\t\t<Link to=\"/\" className=\"card_link\">Back</Link>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t)\r\n\t\t\t}\r\n\t\t</>\r\n\t);\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getFilmsByRegex } from '../helpers/FilmsHelper';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const Autocomplete = ({ data }) => {\r\n\tconst history = useHistory();\r\n\tconst [filteredResults, updateFilteredResults] = useState([]);\r\n\tconst [displayResults, updateDisplayResults] = useState(true);\r\n\tconst [focusIndex, updateFocusIndex] = useState(0);\r\n\tconst linkRefs = [];\r\n\tconst keys = {\r\n\t\tENTER: 13,\r\n\t\tUP: 38,\r\n\t\tDOWN: 40\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tupdateFilteredResults(getFilmsByRegex('', data));\r\n\t}, [data]);\r\n\r\n\tconst updateSearch = (e) => {\r\n\t\tconst searchTerm = e.target.value;\r\n\t\tif (searchTerm === '') {\r\n\t\t\tupdateDisplayResults(true);\r\n\t\t} else {\r\n\t\t\tupdateDisplayResults(false);\r\n\t\t}\r\n\r\n\t\tupdateFilteredResults(getFilmsByRegex(searchTerm, data));\r\n\t};\r\n\r\n\tconst hideAutoSuggest = (e) => {\r\n\t\te.persist();\r\n\t\tif (e.relatedTarget && e.relatedTarget.className === 'autocomplete_link') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tupdateDisplayResults(true);\r\n\t\tupdateFocusIndex(-1);\r\n\t};\r\n\r\n\tconst handleNavigation = (e) => {\r\n\t\tswitch (e.keyCode) {\r\n\t\tcase keys.ENTER:\r\n\t\t\tif (focusIndex !== -1) {\r\n\t\t\t\thistory.push(`./film/${linkRefs[focusIndex]}`);\r\n\t\t\t}\r\n\t\t\thideAutoSuggest(e);\r\n\t\t\tbreak;\r\n\t\tcase keys.UP:\r\n\t\t\tif (focusIndex > -1) {\r\n\t\t\t\tupdateFocusIndex(focusIndex - 1);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase keys.DOWN:\r\n\t\t\tif (focusIndex < filteredResults.length - 1) {\r\n\t\t\t\tupdateFocusIndex(focusIndex + 1);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\tconst SearchResults = () => {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t</>\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<section className=\"autocomplete\">\r\n\t\t\t<input type=\"text\"\r\n\t\t\t\tplaceholder=\"Search your film...\"\r\n\t\t\t\tclassName=\"autocomplete_input\"\r\n\t\t\t\tonChange={updateSearch}\r\n\t\t\t\tonKeyDown={handleNavigation} />\r\n\t\t\t<ul className=\"autocomplete_suggestions\">\r\n\t\t\t\t{!displayResults &&\r\n\t\t\t\t\tfilteredResults.map((article, index) => (\r\n\t\t\t\t\t\t<li key={index} className={focusIndex === index ? 'autocomplete_suggestion_active' : null}>\r\n\t\t\t\t\t\t\t<a href={`./film/${article.id}`} className=\"autocomplete_link\"\r\n\t\t\t\t\t\t\t\tref={() => { linkRefs[index] = article.id; }}>\r\n\t\t\t\t\t\t\t\t{article.title}\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</ul>\r\n\t\t\t<SearchResults />\r\n\t\t</section>\r\n\t);\r\n};\r\n\r\nAutocomplete.propTypes = {\r\n\tdata: PropTypes.array\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const FilmItem = ({\r\n\tid,\r\n\trt_score: score,\r\n\toriginal_title_romanised: romanised,\r\n\toriginal_title: originalTitle,\r\n\ttitle,\r\n\tdescription,\r\n\tposter\r\n}) => {\r\n\treturn (\r\n\t\t<div className=\"col-sm-12 col-md-6 col-4\">\r\n\t\t\t<div className=\"card\" >\r\n\t\t\t\t<div className=\"card_picture\" style={{ backgroundImage: `url(${poster})` }}></div>\r\n\t\t\t\t<div className=\"card_info\">\r\n\t\t\t\t\t<div className=\"card_rate\">\r\n\t\t\t\t\t\t<i className=\"far fa-star\"></i>\r\n\t\t\t\t\t\t<span>{score}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<h3 className=\"card_title\">{title}</h3>\r\n\t\t\t\t<h4 className=\"card_title_original\">{romanised}<small>({originalTitle})</small></h4>\r\n\t\t\t\t<p className=\"card_text\">\r\n\t\t\t\t\t{description}\r\n\t\t\t\t</p>\r\n\t\t\t\t<div className=\"card_link_container\">\r\n\t\t\t\t\t<Link to={`film/${id}`} className=\"card_link\" >More info...</Link>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nFilmItem.propTypes = {\r\n\tid: PropTypes.string,\r\n\trunning_time: PropTypes.string,\r\n\trt_score: PropTypes.string,\r\n\trelease_date: PropTypes.string,\r\n\toriginal_title_romanised: PropTypes.string,\r\n\toriginal_title: PropTypes.string,\r\n\ttitle: PropTypes.string,\r\n\tdescription: PropTypes.string,\r\n\tposter: PropTypes.string\r\n};\r\n","import React, { useContext, useEffect, useState } from 'react';\r\nimport { getFilmsByRegex } from '../helpers/FilmsHelper';\r\nimport { Autocomplete } from './Autocomplete';\r\nimport { FilmItem } from './FilmItem';\r\nimport { FilmsContext } from './FIlmsContext';\r\n\r\nexport const FilmsScreen = () => {\r\n\tconst { films, loading } = useContext(FilmsContext);\r\n\tconst [filmsFiltered, setFilmsFiltered] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetFilmsFiltered(getFilmsByRegex('', films));\r\n\t}, [films]);\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{\r\n\t\t\t\tloading && (\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<div className=\"loading\">\r\n\t\t\t\t\t\t\t<img src=\"https://i.gifer.com/origin/62/6207a5ce52cc8164c1b10a4e460d6df3_w200.gif\" title=\"loading gif\" />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</>)\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Autocomplete data={films} />\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfilmsFiltered?.map(film => (\r\n\t\t\t\t\t\t\t<FilmItem key={film?.id} {...film}></FilmItem>\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t\t</>\r\n\t\t\t}\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { FilmScreen } from '../components/FilmScreen';\r\nimport { FilmsScreen } from '../components/FilmsScreen';\r\n\r\nexport const AppRouter = () => {\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<div className=\"main__container\">\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\" component={FilmsScreen} />\r\n\t\t\t\t\t<Route exact path=\"/film/:filmId\" component={FilmScreen} />\r\n\t\t\t\t\t<Redirect to=\"/\" />\r\n\t\t\t\t</Switch>\r\n\t\t\t</div>\r\n\t\t</Router>\r\n\t);\r\n};\r\n","export default __webpack_public_path__ + \"static/media/studio-ghibli-logo.35cf807f.svg\";","import React from 'react';\r\n\r\nimport { FilmsContext } from './components/FIlmsContext';\r\nimport { useFetch } from './hooks/useFetchFilms';\r\nimport { AppRouter } from './router/AppRouter';\r\n\r\nimport GhibliLogo from './studio-ghibli-logo.svg';\r\n\r\nexport const GhibliApp = () => {\r\n\tconst { films, loading } = useFetch();\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"header\">\r\n\t\t\t\t<img src={GhibliLogo} className=\"header__img\" />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"main\">\r\n\t\t\t\t<FilmsContext.Provider value={{ films, loading }}>\r\n\t\t\t\t\t<AppRouter></AppRouter>\r\n\t\t\t\t</FilmsContext.Provider>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { API_URL, CONFIG_FETCH_GET, getUrlPoster } from '../configuration/ApiConfiguration';\r\n\r\nexport const useFetch = () => {\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [films, setFilms] = useState([]);\r\n\tconst [error, setError] = useState(null);\r\n\r\n\tuseEffect(() => {\r\n\t\tfetch(API_URL, CONFIG_FETCH_GET)\r\n\t\t\t.then(resp => resp.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tdata.forEach(film => {\r\n\t\t\t\t\tfetch(getUrlPoster(film.title))\r\n\t\t\t\t\t\t.then(response => response.json())\r\n\t\t\t\t\t\t.then(posterRes => {\r\n\t\t\t\t\t\t\tfilm = { ...film, poster: posterRes.Poster };\r\n\t\t\t\t\t\t\tsetFilms(films => [...films, film]);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\tsetLoading(false);\r\n\t\tsetError(null);\r\n\t}, [API_URL]);\r\n\r\n\treturn {\r\n\t\tloading,\r\n\t\tfilms,\r\n\t\terror\r\n\t};\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GhibliApp } from './GhibliApp';\nimport './styles/styles.scss';\n\nReactDOM.render(\n\t<GhibliApp />,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}